# /sieu_dinh_bot/modules/sender.py

import os
import logging
import random
import asyncio
from datetime import datetime
from telegram import Bot, Message
from telegram.error import TelegramError
import config
import modules.messages as messages

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class MediaSendError(Exception):
    """L·ªói t√πy ch·ªânh cho c√°c tr∆∞·ªùng h·ª£p kh√¥ng g·ª≠i ƒë∆∞·ª£c media quan tr·ªçng."""
    pass

class BotSender:
    def __init__(self, bot_token: str, chat_id: str):
        self.bot = Bot(token=bot_token)
        self.chat_id = chat_id
        logging.info("‚úÖ Bot ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng!")

    async def _send_message_with_retry(self, text: str, parse_mode='HTML') -> Message | None:
        for attempt in range(2):
            try:
                message = await self.bot.send_message(self.chat_id, text, parse_mode=parse_mode)
                return message
            except TelegramError as e:
                logging.warning(f"L·ªói g·ª≠i tin nh·∫Øn (l·∫ßn {attempt+1}): {e}. Th·ª≠ l·∫°i sau {config.RETRY_DELAY_SECONDS}s...")
                if attempt == 0: await asyncio.sleep(config.RETRY_DELAY_SECONDS)
        logging.error(f"‚ùå G·ª≠i tin nh·∫Øn th·∫•t b·∫°i sau 2 l·∫ßn th·ª≠.")
        return None

    async def _send_video(self, video_path: str, caption: str, parse_mode='HTML') -> Message:
        for attempt in range(2):
            try:
                with open(video_path, 'rb') as video_file:
                    sent_message = await self.bot.send_video(self.chat_id, video_file, caption=caption, parse_mode=parse_mode)
                logging.info(f"ƒê√£ g·ª≠i video: {os.path.basename(video_path)}")
                return sent_message
            except FileNotFoundError:
                error_msg = f"KH√îNG T√åM TH·∫§Y FILE video: {video_path}"
                logging.error(f"‚ùå {error_msg}")
                raise MediaSendError(error_msg)
            except TelegramError as e:
                logging.warning(f"L·ªói Telegram khi g·ª≠i video (l·∫ßn {attempt+1}): {e}. Th·ª≠ l·∫°i sau {config.RETRY_DELAY_SECONDS}s...")
                if attempt == 0: await asyncio.sleep(config.RETRY_DELAY_SECONDS)
        
        final_error_msg = f"G·ª≠i video th·∫•t b·∫°i sau 2 l·∫ßn th·ª≠: {os.path.basename(video_path)}"
        logging.error(f"‚ùå {final_error_msg}")
        raise MediaSendError(final_error_msg)
    
    # =========================================================================
    # <<< S·ª¨A ƒê·ªîI T·∫†I ƒê√ÇY: G·ª≠i ·∫£nh d∆∞·ªõi d·∫°ng file ƒë·ªÉ kh√¥ng b·ªã m·ªù/v·ª° >>>
    # =========================================================================
    async def _send_photo_with_retry(self, photo_path: str, caption: str, parse_mode='HTML'):
        for attempt in range(2):
            try:
                with open(photo_path, 'rb') as photo_file:
                    # ƒê·ªïi t·ª´ send_photo sang send_document ƒë·ªÉ g·ª≠i ·∫£nh ch·∫•t l∆∞·ª£ng g·ªëc
                    await self.bot.send_document(self.chat_id, document=photo_file, caption=caption, parse_mode=parse_mode)
                logging.info(f"ƒê√£ g·ª≠i ·∫£nh (kh√¥ng n√©n): {os.path.basename(photo_path)}")
                return True
            except Exception as e:
                logging.warning(f"L·ªói g·ª≠i ·∫£nh (l·∫ßn {attempt+1}): {e}. Th·ª≠ l·∫°i sau {config.RETRY_DELAY_SECONDS}s...")
                if attempt == 0: await asyncio.sleep(config.RETRY_DELAY_SECONDS)

        final_error_msg = f"G·ª≠i ·∫£nh th·∫•t b·∫°i sau 2 l·∫ßn th·ª≠: {os.path.basename(photo_path)}"
        logging.error(f"‚ùå {final_error_msg}")
        raise MediaSendError(final_error_msg)

    async def _send_gif_with_retry(self, gif_path: str, caption: str, parse_mode='HTML'):
        for attempt in range(2):
            try:
                with open(gif_path, 'rb') as gif_file:
                    await self.bot.send_animation(self.chat_id, gif_file, caption=caption, parse_mode=parse_mode)
                logging.info(f"ƒê√£ g·ª≠i GIF: {os.path.basename(gif_path)}")
                return True
            except FileNotFoundError:
                error_msg = f"KH√îNG T√åM TH·∫§Y FILE GIF: {gif_path}"
                logging.error(f"‚ùå {error_msg}")
                raise MediaSendError(error_msg)
            except Exception as e:
                logging.warning(f"L·ªói g·ª≠i GIF (l·∫ßn {attempt+1}): {e}. Th·ª≠ l·∫°i sau {config.RETRY_DELAY_SECONDS}s...")
                if attempt == 0: await asyncio.sleep(config.RETRY_DELAY_SECONDS)
        
        final_error_msg = f"G·ª≠i GIF th·∫•t b·∫°i sau 2 l·∫ßn th·ª≠: {os.path.basename(gif_path)}"
        logging.error(f"‚ùå {final_error_msg}")
        raise MediaSendError(final_error_msg)
        
    async def send_good_morning(self):
        await self._send_message_with_retry(messages.get_good_morning_message())
        logging.info("‚òÄÔ∏è  ƒê√£ g·ª≠i tin nh·∫Øn ch√†o bu·ªïi s√°ng.")

    async def send_good_night(self):
        await self._send_message_with_retry(messages.get_good_night_message())
        logging.info("üåô  ƒê√£ g·ª≠i tin nh·∫Øn ch√∫c ng·ªß ngon.")
    
    async def send_group_rules(self):
        try:
            await self._send_video(config.RULES_VIDEO_PATH, messages.get_animated_rules_caption())
            logging.info("üìú  ƒê√£ g·ª≠i video n·ªôi quy nh√≥m.")
        except MediaSendError as e:
            logging.error(f"L·ªói khi g·ª≠i video n·ªôi quy: {e}. S·∫Ω th·ª≠ l·∫°i sau.")

    async def send_golden_tip(self):
        await self._send_message_with_retry(messages.get_golden_tip())
        logging.info("üí°  ƒê√£ g·ª≠i tip v√†ng.")
    
    async def send_schedule_image(self):
        caption = "‚è∞ <b>KHUNG GI·ªú L√äN CA HI·∫æU B.C.R</b> ‚è∞\n\n<i>Anh em ch·ªß ƒë·ªông theo d√µi l·ªãch ƒë·ªÉ v√†o ƒë√∫ng phi√™n nh√©!</i>"
        try:
            await self._send_photo_with_retry(config.SCHEDULE_IMAGE_PATH, caption)
        except MediaSendError as e:
            logging.error(f"L·ªói khi g·ª≠i ·∫£nh l·ªãch tr√¨nh: {e}. S·∫Ω th·ª≠ l·∫°i sau.")
    
    async def send_intro_video(self):
        caption = "üí∞ <b>H∆Ø·ªöNG D·∫™N CHIA V·ªêN THEO TI√äU CHU·∫®N NH√ìM</b> üí∞\n\n<i>Ai c√≥ m·ª©c v·ªën bao nhi√™u th√¨ m√¨nh c√≥ chia l·ªánh c∆∞·ª£c s·∫µn m·ªçi ng∆∞·ªùi xem nh√©!</i>"
        try:
            await self._send_video(config.INTRO_VIDEO_PATH, caption)
        except MediaSendError as e:
            logging.error(f"L·ªói khi g·ª≠i video h∆∞·ªõng d·∫´n: {e}. S·∫Ω th·ª≠ l·∫°i sau.")

    async def send_start_session(self, session_time: datetime) -> Message:
        sent_message = await self._send_video(config.START_SESSION_VIDEO, messages.get_start_session_caption(session_time))
        return sent_message

    # =========================================================================
    # <<< S·ª¨A ƒê·ªîI T·∫†I ƒê√ÇY: T√¨m file .png thay v√¨ .jpg >>>
    # =========================================================================
    async def send_table_images(self) -> int:
        chosen_table_number = random.randint(1, 8)
        # T√¨m file ·∫£nh c√≥ ƒëu√¥i .png
        image_name = f"table{chosen_table_number}.png"
        image_path = os.path.join(config.TABLE_IMAGES_DIR, image_name)
        caption = messages.get_table_announcement_caption(chosen_table_number)
        await self._send_photo_with_retry(image_path, caption)
        return chosen_table_number

    async def send_prediction(self) -> int | None:
        sent_message = None
        try:
            sent_message = await self._send_video(config.PREDICTION_VIDEO, messages.get_prediction_caption())
        except MediaSendError as e:
            logging.warning(f"L·ªói g·ª≠i video d·ª± ƒëo√°n: {e}. Chuy·ªÉn sang g·ª≠i tin nh·∫Øn vƒÉn b·∫£n.")
            fallback_text = messages.get_prediction_text_fallback()
            sent_message = await self._send_message_with_retry(fallback_text)

        if sent_message:
            return sent_message.message_id
        
        logging.error("‚ùå‚ùå G·ª¨I L·ªÜNH TH·∫§T B·∫†I: Kh√¥ng th·ªÉ g·ª≠i video l·∫´n tin nh·∫Øn vƒÉn b·∫£n.")
        return None

    async def send_end_session(self, session_time: datetime, next_session_time: datetime, message_id_to_unpin: int | None):
        if message_id_to_unpin:
            try:
                await self.bot.unpin_chat_message(self.chat_id, message_id_to_unpin)
                logging.info(f"üìå  ƒê√£ g·ª° ghim tin nh·∫Øn (ID: {message_id_to_unpin}).")
            except TelegramError as e:
                logging.warning(f"‚ö†Ô∏è  Kh√¥ng th·ªÉ g·ª° ghim tin nh·∫Øn: {e}")
        try:
            await self._send_video(config.END_SESSION_VIDEO, messages.get_end_session_caption(session_time, next_session_time))
        except MediaSendError:
            await self._send_message_with_retry(messages.get_end_session_caption(session_time, next_session_time))