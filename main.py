# /sieu_dinh_bot/main.py

import asyncio
import logging
from datetime import datetime, timedelta
import config
# --- N√ÇNG C·∫§P LOGIC: Import l·ªõp l·ªói t√πy ch·ªânh ---
from modules.sender import BotSender, MediaSendError
import os
from flask import Flask
from threading import Thread


logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is alive and the web server is running!"


# --- N√ÇNG C·∫§P LOGIC: X·ª≠ l√Ω l·ªói m·ªôt c√°ch ch·∫∑t ch·∫Ω ---
async def run_session_workflow(sender: BotSender, session_time: datetime):
    prediction_message_id = None
    next_session_time = session_time + timedelta(minutes=config.SESSION_INTERVAL_MINUTES)
    
    try:
        logger.info(f"====== B·∫ÆT ƒê·∫¶U CA K√âO {session_time.strftime('%H:%M')} ======")
        
        # C√°c b∆∞·ªõc trong quy tr√¨nh c√≥ th·ªÉ tung ra MediaSendError
        await sender.send_start_session(session_time)
        await asyncio.sleep(config.DELAY_STEP_1_TO_2)
        
        await sender.send_table_images()
        await asyncio.sleep(config.DELAY_STEP_2_TO_3)
        
        prediction_message_id = await sender.send_prediction()
        await asyncio.sleep(config.DELAY_STEP_3_TO_4)

    except MediaSendError as e:
        # ƒê√¢y l√† ph·∫ßn x·ª≠ l√Ω th√¥ng minh: N·∫øu c√≥ l·ªói media, h·ªßy ca v√† th√¥ng b√°o
        logger.error(f"---!!! H·ª¶Y CA K√âO do l·ªói MediaSendError: {e} !!!---")
        await sender._send_message_with_retry(
            f"‚ùóÔ∏è‚ùóÔ∏è <b>TH√îNG B√ÅO KH·∫®N</b> ‚ùóÔ∏è‚ùóÔ∏è\n\n"
            f"R·∫•t ti·∫øc, ca k√©o <b>{session_time.strftime('%H:%M')}</b> ƒë√£ g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t v√† kh√¥ng th·ªÉ ti·∫øp t·ª•c.\n\n"
            f"Nguy√™n nh√¢n: <i>L·ªói kh√¥ng th·ªÉ g·ª≠i t·ªáp media quan tr·ªçng.</i>\n\n"
            f"Mong to√†n th·ªÉ anh em th√¥ng c·∫£m. Ch√∫ng t√¥i s·∫Ω kh·∫Øc ph·ª•c s·ªõm nh·∫•t c√≥ th·ªÉ."
        )

    except Exception as e:
        # B·∫Øt c√°c l·ªói kh√¥ng x√°c ƒë·ªãnh kh√°c
        logger.error(f"‚ùå G·∫∑p l·ªói kh√¥ng x√°c ƒë·ªãnh nghi√™m tr·ªçng gi·ªØa ca k√©o: {e}")
    
    finally:
        # D√π th√†nh c√¥ng hay th·∫•t b·∫°i, v·∫´n ch·∫°y ph·∫ßn k·∫øt th√∫c ƒë·ªÉ d·ªçn d·∫πp (g·ª° ghim, b√°o ca ti·∫øp)
        await sender.send_end_session(session_time, next_session_time, prediction_message_id)
        logger.info(f"====== K·∫æT TH√öC CA K√âO {session_time.strftime('%H:%M')} ======\n")
# -------------------------------------------------------------------


# /sieu_dinh_bot/main.py

async def main_loop(sender: BotSender):
    logger.info("üöÄ Bot ƒëang kh·ªüi ƒë·ªông v√† ki·ªÉm tra l·ªãch tr√¨nh...")
    last_day_checked = None
    sent_flags = {}

    while True:
        now = datetime.now(config.VN_TZ)

        # --- A. Qu·∫£n l√Ω tr·∫°ng th√°i h√†ng ng√†y ---
        if now.date() != last_day_checked:
            logger.info(f"‚òÄÔ∏è  Ng√†y m·ªõi b·∫Øt ƒë·∫ßu ({now.strftime('%d/%m/%Y')}). ƒê·∫∑t l·∫°i tr·∫°ng th√°i.")
            sent_flags = {
                'good_night_sent': False,
                'last_rules_sent': None,
                'last_schedule_image_hour': -1,
                'last_intro_video_hour': -1,
                'last_golden_tip_hour': -1,
                'last_session_run_time': None
            }
            last_day_checked = now.date()
            
            # G·ª≠i tin nh·∫Øn ch√†o ng√†y m·ªõi ngay khi b∆∞·ªõc qua ng√†y m·ªõi
            await sender.send_good_morning()

        # --- B. X√°c ƒë·ªãnh gi·ªù ho·∫°t ƒë·ªông ch√≠nh (c√≥ phi√™n k√©o) ---
        # B·∫Øt ƒë·∫ßu t·ª´ 6h30 s√°ng tr·ªü ƒëi
        is_session_hours = now.hour > config.SESSION_START_HOUR or \
                           (now.hour == config.SESSION_START_HOUR and now.minute >= config.SESSION_START_MINUTE)

        if is_session_hours:
            # --- LOGIC GI·ªú HO·∫†T ƒê·ªòNG CH√çNH (06:30 - 23:59) ---
            
            # 1. G·ª≠i c√°c tin nh·∫Øn ƒë·ªãnh k·ª≥ (l·ªãch, n·ªôi quy, video, tip v√†ng)
            if now.minute == 15 and now.hour != sent_flags['last_schedule_image_hour']:
                await sender.send_schedule_image()
                sent_flags['last_schedule_image_hour'] = now.hour
            # *** THAY ƒê·ªîI: Chuy·ªÉn logic g·ª≠i Tip V√†ng v√†o ƒë√¢y, g·ª≠i v√†o ph√∫t 30 m·ªói gi·ªù ***
            elif now.minute == 30 and now.hour != sent_flags['last_golden_tip_hour']:
                await sender.send_golden_tip()
                sent_flags['last_golden_tip_hour'] = now.hour
            elif now.minute == 45 and now.hour != sent_flags['last_intro_video_hour']:
                await sender.send_intro_video()
                sent_flags['last_intro_video_hour'] = now.hour
            elif sent_flags['last_rules_sent'] is None or (now - sent_flags['last_rules_sent']) >= timedelta(hours=config.RULES_INTERVAL_HOURS):
                # Ch·ªâ g·ª≠i n·ªôi quy n·∫øu kh√¥ng tr√πng v·ªõi th·ªùi gian b·∫Øt ƒë·∫ßu phi√™n
                if now.minute % config.SESSION_INTERVAL_MINUTES != 0:
                    await sender.send_group_rules()
                    sent_flags['last_rules_sent'] = now

            # 2. B·∫Øt ƒë·∫ßu phi√™n k√©o
            current_session_time = now.replace(second=0, microsecond=0)
            if now.minute % config.SESSION_INTERVAL_MINUTES == 0:
                if sent_flags.get('last_session_run_time') != current_session_time:
                    sent_flags['last_session_run_time'] = current_session_time
                    asyncio.create_task(run_session_workflow(sender, now))
            
            # 3. G·ª≠i tin nh·∫Øn Ch√∫c ng·ªß ngon g·∫ßn n·ª≠a ƒë√™m
            if now.hour == 23 and now.minute >= 55 and not sent_flags.get('good_night_sent'):
                await sender.send_good_night()
                sent_flags['good_night_sent'] = True
        
        else:
            # --- LOGIC GI·ªú NGH·ªà NG∆†I (00:00 - 06:29) ---
            # *** THAY ƒê·ªîI: Bot s·∫Ω kh√¥ng g·ª≠i tip n·ªØa v√† ng·ªß m·ªôt gi·∫•c d√†i ***
            logger.info(f"Gi·ªù ngh·ªâ ng∆°i (t·ª´ 00:00 ƒë·∫øn 06:29). Bot s·∫Ω ki·ªÉm tra l·∫°i sau {config.OFF_HOURS_SLEEP_MINUTES} ph√∫t.")
            await asyncio.sleep(config.OFF_HOURS_SLEEP_MINUTES * 60)
            continue # B·ªè qua sleep ng·∫Øn ·ªü cu·ªëi v√† l·∫∑p l·∫°i

        # Ch·ªù 10 gi√¢y tr∆∞·ªõc khi l·∫∑p l·∫°i trong gi·ªù ho·∫°t ƒë·ªông ch√≠nh
        await asyncio.sleep(10)


# (Ph·∫ßn kh·ªüi ƒë·ªông bot gi·ªØ nguy√™n nh∆∞ c≈©)
if not all([config.TELEGRAM_TOKEN, config.CHAT_ID]):
    logger.critical("‚ùå Thi·∫øu TELEGRAM_TOKEN ho·∫∑c CHAT_ID trong bi·∫øn m√¥i tr∆∞·ªùng.")
else:
    logger.info("‚úÖ ƒê√£ t√¨m th·∫•y c√°c bi·∫øn m√¥i tr∆∞·ªùng. B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o bot...")
    bot_sender = BotSender(config.TELEGRAM_TOKEN, config.CHAT_ID)
    
    bot_thread = Thread(target=lambda: asyncio.run(main_loop(bot_sender)))
    bot_thread.daemon = True
    bot_thread.start()
    logger.info("‚úÖ Lu·ªìng bot ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông.")